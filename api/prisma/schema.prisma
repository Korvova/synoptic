// File: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Room {
  id         Int       @id @default(autoincrement())
  name       String
  background String?
  webhookUrl String?
  elements   Element[]
}

model ElementType {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  imgNoId   String? // картинка без ID
  imgWithId String? // картинка с ID
  imgOn     String? // картинка вкл
  imgOff    String? // картинка выкл
  elements  Element[]
}

model Element {
  id     Int  @id @default(autoincrement())
  room   Room @relation(fields: [roomId], references: [id])
  roomId Int

  type   ElementType @relation(fields: [typeId], references: [id])
  typeId Int

  x     Int
  y     Int
  state String?
  label String?

  deviceId Int?
  device   Device? @relation(fields: [deviceId], references: [id])

  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  volume Int?

  // ───── связь с пресетом камеры ─────
  presetId Int?
  preset   Preset? @relation("PresetElement", fields: [presetId], references: [id])
}

model Device {
  id         Int       @id @default(autoincrement())
  identifier String    @unique
  elements   Element[] // relation back to Element.device
}

model User {
  id         Int       @id @default(autoincrement())
  identifier String    @unique
  name       String?
  elements   Element[] // relation back to Element.user
}

model Camera {
  id         Int    @id @default(autoincrement())
  identifier String @unique // например, IP или серийник

  name String?

  presets Preset[]
}

model Preset {
  id          Int     @id @default(autoincrement())
  number      Int // «1», «2», «3» …
  description String?

  cameraId Int
  camera   Camera @relation(fields: [cameraId], references: [id])

  /// связанный элемент (FK хранится в Element.presetId)
  elements Element[] @relation("PresetElement")

  @@unique([cameraId, number]) // у одной камеры номера уникальны
}
